---
apiVersion: v1
kind: ConfigMap
metadata:
  name: s3-upload-script
  namespace: monitoring
data:
  upload_to_s3.py: |
    #!/usr/local/bin/python3
    import os
    import boto3
    import sys

    def get_most_recent_tarfile(base_path):
        # List all .tar.gz files in the directory
        tar_files = [os.path.join(base_path, f) for f in os.listdir(base_path) if f.endswith('.tar.gz')]
        if not tar_files:
            raise Exception("No .tar.gz file found")
        # Return the most recent file
        return max(tar_files, key=os.path.getmtime)

    def upload_file_to_s3(file_path, bucket_name):
        s3_client = boto3.client('s3')
        # Use only the file name as the S3 key
        s3_key = os.path.basename(file_path)
        try:
            s3_client.upload_file(file_path, bucket_name, s3_key)
            print(f"File {s3_key} successfully uploaded to bucket {bucket_name}")
        except Exception as e:
            print(f"Error uploading {s3_key}: {str(e)}")
            raise e

    # Get bucket from environment variable
    bucket = os.environ.get('S3_BUCKET')
    if not bucket:
        print("Error: S3_BUCKET environment variable not found")
        sys.exit(1)

    try:
        most_recent_tarfile = get_most_recent_tarfile('/prometheus/snapshots')
        upload_file_to_s3(most_recent_tarfile, bucket)
        print("Upload completed successfully")
        sys.exit(0)
    except Exception as e:
        print(f"Error: {str(e)}")
        sys.exit(1)
